{"id":991586232,"lang":"java","lang_name":"Java","time":"4 months, 4 weeks","timestamp":1689057158,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/991586232/","is_pending":"Not Pending","title":"Number of Enclaves","memory":"54.4 MB","code":"class Solution {\n    public int numEnclaves(int[][] grid) {\n        int n = grid.length;\n\t  int m = grid[0].length;\n\n\t  boolean vis[][] = new boolean[n][m];\n\n\t  int count = 0;\n\t  for(int i = 0; i < n; i++) {\n\t\t  for(int j = 0; j < m; j++) {\n\t\t\t  if(i == 0 || j == 0 || i == n-1 || j == m-1) {\n\t\t\t\t  if(!vis[i][j] || grid[i][j] == 1)\n\t\t\t\t\t  drawTree(grid, i, j, vis);\n\t\t\t  } \n\t\t  }\t\t  \n\t  }\n\n\t  for(int i = 0; i < n; i++) {\n\t\t  for(int j = 0; j < m; j++) {\n\t\t\t  if(i == 0 || j == 0 || i == n-1 || j == m-1) {\n\t\t\t\t  continue;\n\t\t\t  } else if(grid[i][j] == 1 && !vis[i][j]) count++;\n\t\t  }\t\t  \n\t  }\n\t  return count;\n    }\n\n     void drawTree(int[][] grid, int i, int j, boolean[][] vis) {\n\t\tif(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0 || vis[i][j]) {\n\t\t\treturn;\n\t\t}\n\n\t\tvis[i][j] = true;\n\n\t\tdrawTree(grid, i + 1, j, vis);\n\t\tdrawTree(grid, i, j + 1, vis);\n\t\tdrawTree(grid, i - 1, j, vis);\n\t\tdrawTree(grid, i, j - 1, vis);\n\t}\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-enclaves","has_notes":false,"flag_type":1}