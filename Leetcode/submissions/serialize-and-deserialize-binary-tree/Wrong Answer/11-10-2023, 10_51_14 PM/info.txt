{"id":1096051886,"lang":"java","lang_name":"Java","time":"3 weeks, 5 days","timestamp":1699636874,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1096051886/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        \n        Queue<TreeNode> q = new LinkedList<>();\n        q.add(root);\n        String encoded = \"\";\n\n        while(!q.isEmpty()) {\n            TreeNode dq = q.remove();\n\n            if(dq != null) {\n                encoded += String.valueOf(dq.val);\n                q.add(dq.left);\n                q.add(dq.right);\n            } else {\n                encoded += \"n\";\n            }\n        }\n\n        return encoded;\n\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        \n        // System.out.println(data);\n        if(data.charAt(0) == 'n') return null;\n        // constructing tree level order wise\n        TreeNode root = new TreeNode(data.charAt(0) - '0');\n        data = data.substring(1);\n        Queue<TreeNode> q = new LinkedList<>();\n        q.add(root);\n\n        while(!q.isEmpty()) {\n            int size = q.size();\n            while(size > 0) {\n                TreeNode curr = q.remove();\n                char c1 = 'n';\n                char c2 = 'n';\n\n                int v1 = -1;\n                int v2 = -1;\n                if(data.length() >= 2) {\n                    c1 = data.charAt(0);\n                    if(c1 == '-') {\n                        v1 = -1 * (data.charAt(1) - '0');\n                        data = data.substring(2);\n                    } else {\n                        v1 = c1 - '0';\n                        data = data.substring(1);\n                    }\n                    c2 = data.charAt(0);\n                    if(c2 == '-') {\n                        v2 = -1 * (data.charAt(1) - '0');\n                        data = data.substring(2);\n                    } else {\n                        v2 = c2 - '0';\n                        data = data.substring(1);\n                    }\n                } else if(data.length() == 1) {\n                    c1 = data.charAt(0);\n                    data = data.substring(1);\n                    v1 = c1 - '0';\n                }\n\n                if(c1 != 'n') {\n                    curr.left = new TreeNode(v1);\n                    q.add(curr.left);\n                }\n                if(c2 != 'n') {\n                    curr.right = new TreeNode(v2);\n                    q.add(curr.right);    \n                }\n\n                size--;\n            }\n        }\n        return root;\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));","compare_result":"11111111111111011011101111111111111111011111000001100","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}