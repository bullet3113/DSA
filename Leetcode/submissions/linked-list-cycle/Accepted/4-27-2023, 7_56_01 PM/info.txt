{"id":940630896,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1682605561,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/940630896/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"44 MB","code":"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        // we are using two pointer approach here\n        // taking two node slow and fast\n        // slow node increment node by 1 and fast by 2\n        // so if any loop is not present then fast will terminate the loop \n        // if loop present then fast will keep looping until both slow and fast \n        // became equal\n        ListNode slow = head;\n        ListNode fast = head;\n        while(fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n\n            if(slow == fast)\n            return true;\n        }\n\n        return false;\n    }\n}","compare_result":"11111111111111111111111","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1}