{"id":998046307,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1689731187,"status":10,"status_display":"Accepted","runtime":"162 ms","url":"/submissions/detail/998046307/","is_pending":"Not Pending","title":"Possible Bipartition","memory":"104.6 MB","code":"class Solution {\n    public boolean possibleBipartition(int n, int[][] d) {\n        \n        // create graph\n\t\tArrayList<Integer>[] adj = new ArrayList[n];\n\t\tfor(int i = 0; i < n; i++) adj[i] = new ArrayList<>();\n\n\t\tfor(int i = 0; i < d.length; i++) {\n\t\t\tint u = d[i][0] - 1;\n\t\t\tint v = d[i][1] - 1;\n\n\t\t\tadj[u].add(v);\n\t\t\tadj[v].add(u);\n\t\t}\n\n        int[] vis = new int[n];\n        Arrays.fill(vis, -1);\n\n        for(int i = 0; i < n; i++) {\n            if(vis[i] == -1) if(!bfs(adj, i, vis)) return false;\n        }\n\n        return true;\n    }\n\n    boolean bfs(ArrayList<Integer>[] adj, int src, int[] vis) {\n        Queue<pair> q = new LinkedList<>();\n\n        q.add(new pair(src, 0));\n\n        while(!q.isEmpty()) {\n            pair dq = q.remove();\n\n            if(vis[dq.x] != -1) {\n                if(vis[dq.x] != dq.level) return false;\n            } else {\n                vis[dq.x] = dq.level;\n            }\n\n            for(int i: adj[dq.x]) {\n                if(vis[i] == -1) q.add(new pair(i, dq.level + 1));\n            }\n        }\n\n        return true;\n    }\n}\n\nclass pair {\n    int x;\n    int level;\n\n    public pair(int x, int level) {\n        this.x = x;\n        this.level = level;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"possible-bipartition","has_notes":false,"flag_type":1}