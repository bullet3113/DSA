{"id":1095909222,"lang":"java","lang_name":"Java","time":"3 weeks, 5 days","timestamp":1699620540,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1095909222/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"43.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        \n        TreeNode root = null;\n        if(inorder.length == 0) return root;\n\n        int val = postorder[postorder.length-1];\n        root = new TreeNode(val);\n        // finding val in inorder array\n        int pos = -1;\n        for(int i = 0; i < inorder.length; i++) {\n            if(inorder[i] == val) pos = i;\n        }\n\n        if(pos == -1) return null;\n\n        root.right = buildTree(Arrays.copyOfRange(inorder, pos+1, inorder.length), Arrays.copyOfRange(postorder, pos, postorder.length-1));\n        root.left = buildTree(Arrays.copyOfRange(inorder, 0, pos), Arrays.copyOfRange(postorder, 0, pos));\n\n        return root;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}