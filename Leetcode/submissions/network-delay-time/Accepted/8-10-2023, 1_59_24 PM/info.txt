{"id":1017349669,"lang":"java","lang_name":"Java","time":"3 months, 4 weeks","timestamp":1691656164,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1017349669/","is_pending":"Not Pending","title":"Network Delay Time","memory":"47.9 MB","code":"class Solution {\n    public class Edge{\n        int v = 0;\n        int w = 0;\n        Edge(int v, int w){\n            this.v = v;\n            this.w = w;\n        }\n    }\n    public class Pair{\n        int vtx = 0;\n        int wsf = 0;\n        Pair(int vtx, int wsf){\n            this.vtx = vtx;\n            this.wsf = wsf;\n        }\n    }\n    public int dijkstraAlgo(ArrayList<Edge>[] graph, int src){\n        int[] dist = new int[graph.length + 1];\n        Arrays.fill(dist, (int)1e9);\n        dist[src] = 0;\n        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->{\n            return a.wsf - b.wsf;\n        });\n        pq.add(new Pair(src, 0));\n        while(pq.size() != 0){\n            Pair p = pq.remove();\n            for(Edge e : graph[p.vtx]){\n                if(p.wsf + e.w < dist[e.v]) {\n                    dist[e.v] = p.wsf + e.w;\n                    pq.add(new Pair(e.v, p.wsf + e.w));\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 1; i < graph.length; i++){\n            if(dist[i] == (int)1e9){ \n                return -1;\n            }\n            ans = Math.max(ans, dist[i]);\n        }\n        return ans;\n    }\n    public int networkDelayTime(int[][] times, int n, int k) {\n        ArrayList<Edge>[] graph = new ArrayList[n + 1];\n        for(int i = 0 ; i <= n; i++){\n            graph[i] = new ArrayList<>();\n        }\n        for(int[] e : times){\n            graph[e[0]].add(new Edge(e[1], e[2]));\n        }\n        return dijkstraAlgo(graph, k);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"network-delay-time","has_notes":false,"flag_type":1}