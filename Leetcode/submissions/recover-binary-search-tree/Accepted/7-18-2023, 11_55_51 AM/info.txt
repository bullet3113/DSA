{"id":997313137,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1689661551,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/997313137/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"43.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    TreeNode first = null;\n    TreeNode mid = null;\n    TreeNode last = null;\n    TreeNode prev = null;\n    public void recoverTree(TreeNode root) {\n        \n        // inorder traversal\n        helper(root);\n\n        if(first != null && last != null) {\n            int temp = first.val;\n            first.val = last.val;\n            last.val = temp;\n        } else if(first != null && mid != null) {\n            int temp = first.val;\n            first.val = mid.val;\n            mid.val = temp;\n        }\n    }\n\n    void helper(TreeNode root) {\n        if(root == null) return;\n\n        helper(root.left);\n\n        if(prev != null && root.val < prev.val) {\n            if(first == null) {\n                first = prev;\n                mid = root;\n            } else {\n                last = root;\n            }\n        }\n\n        prev = root;\n\n        helper(root.right);\n    }\n}","compare_resulttitle_slug":"recover-binary-search-tree","has_notes":false,"flag_type":1}