{"id":1047137916,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1694494514,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1047137916/","is_pending":"Not Pending","title":"Combination Sum","memory":"43.8 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        \n        List<List<Integer>> list = new ArrayList<>();\n        helper(candidates, target, 0, 0, new ArrayList<>(), list);\n\n        return list;\n    }\n\n    void helper(int[] a, int t, int i, int sum, List<Integer> temp, List<List<Integer>> list) {\n\n        if(sum > t) return;\n\n        if(sum == t) {\n            // Collections.sort(temp);\n            // if(!list.contains(temp)) {\n                list.add(new ArrayList(temp));            \n            // }\n\n            return;\n        }\n\n        if(i == a.length) return;\n\n        // for(int j = 0; j <= i; j++) {\n            temp.add(a[i]);\n            helper(a, t, i, sum + a[i], temp, list);\n            temp.remove(temp.size() - 1);\n            helper(a, t, i+1, sum, temp, list);\n        // }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}