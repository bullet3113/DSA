{"id":1080404720,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1697870516,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1080404720/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"41.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {\n        // creating hashmap for storing parent pointers\n        Map<TreeNode, TreeNode> map = new HashMap<>();\n        dfs(root, null, map);\n        \n        List<Integer> ans = new ArrayList<>(); // answer storage\n        dfs(target, k, ans, new HashSet<>(), map);\n        // traveersing target node childs\n        // going left\n        // dfs(target.left, k, ans);\n        // going right\n        // dfs(target.right, k, ans);\n        // going for parent of target node\n        // TreeNode parent = map.get(target);\n        // if(parent != null) {\n        //    if (parent.left == target) parent = parent.right;\n        //     else parent = parent.left;\n        // }\n        // while(parent != null) {\n        //     // going left\n        //     dfs(parent.left, k, ans);\n        //     // going right\n        //     dfs(parent.right, k, ans);\n\n        //     // parent of parent\n        //     parent = map.get(parent);\n        // }\n\n        // for(TreeNode temp: map.keySet()) {\n        //     if(map.get(temp) != null)\n        //     System.out.println(temp.val + \" \" + map.get(temp).val);\n        // }\n\n        return ans;\n    }\n\n    void dfs(TreeNode root, int k, List<Integer> ans, Set<TreeNode> set, Map<TreeNode, TreeNode> map) {\n        if(root == null || k < 0 || set.contains(root)) return;\n\n        set.add(root);\n        if(k == 0) ans.add(root.val);\n        dfs(map.get(root), k-1, ans, set, map);\n        dfs(root.left, k-1, ans, set, map);\n        dfs(root.right, k-1, ans, set, map);\n\n        set.remove(root);\n    }\n\n    // dfs traversal\n    void dfs(TreeNode root, TreeNode parent, Map<TreeNode, TreeNode> map) {\n        if(root == null) return;\n\n        map.put(root, parent);\n        // going left\n        dfs(root.left, root, map);\n        // going right\n        dfs(root.right, root, map);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree","has_notes":false,"flag_type":1}