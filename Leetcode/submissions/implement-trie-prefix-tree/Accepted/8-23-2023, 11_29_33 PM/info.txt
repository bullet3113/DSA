{"id":1029810060,"lang":"java","lang_name":"Java","time":"3 months, 2 weeks","timestamp":1692813573,"status":10,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/1029810060/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"54.4 MB","code":"class Node {\n    Node[] child;\n    boolean eow;\n\n    public Node() {\n        child = new Node[26];\n        Arrays.fill(child, null);\n        eow = false;\n    }\n}\n\nclass Trie {\n\n    Node root;\n    public Trie() {\n        root = new Node();\n    }\n    \n    public void insert(String word) {\n        Node curr = root;\n        for(int i = 0; i < word.length(); i++) {\n            int idx = word.charAt(i) - 'a';\n\n            if(curr.child[idx] == null) {\n                curr.child[idx] = new Node();\n            }\n\n            if(i == word.length()-1) {\n                curr.child[idx].eow = true;\n            }\n\n            curr = curr.child[idx];\n        }\n    }\n    \n    public boolean search(String word) {\n        Node curr = root;\n        for(int i = 0; i < word.length(); i++) {\n            int idx = word.charAt(i) - 'a';\n\n            if(curr.child[idx] == null) return false;\n            if(i == word.length() - 1 && curr.child[idx].eow == false) {\n                return false;\n            }\n\n            curr = curr.child[idx];\n        }\n\n        return true;\n    }\n    \n    public boolean startsWith(String word) {\n        Node curr = root;\n        for(int i = 0; i < word.length(); i++) {\n            int idx = word.charAt(i) - 'a';\n\n            if(curr.child[idx] == null) return false;\n\n            curr = curr.child[idx];\n        }\n\n        return true;\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}