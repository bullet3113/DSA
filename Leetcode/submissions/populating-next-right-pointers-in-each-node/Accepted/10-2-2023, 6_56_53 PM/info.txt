{"id":1064952716,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1696253213,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1064952716/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"43.3 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n    \n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\n    public Node connect(Node root) {\n        \n        // getting the level order traversal first\n        Node curr = root;\n        Queue<Node> q = new LinkedList<>();\n\n        q.add(curr);\n\n        while(!q.isEmpty()) {\n            int size = q.size();\n\n            while(size > 0) {\n                Node dq = q.remove();\n\n                if(dq != null) {\n                    if(size == 1) dq.next = null;\n                else {\n                    dq.next = q.peek();\n                }\n\n                if(dq.left != null) q.add(dq.left);\n                if(dq.right != null) q.add(dq.right);\n\n                // dq.right = null;\n                }\n\n                size--;\n            }\n        }\n\n        return root;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node","has_notes":false,"flag_type":1}