{"id":1105051559,"lang":"java","lang_name":"Java","time":"1 week, 6 days","timestamp":1700768751,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1105051559/","is_pending":"Not Pending","title":"Max Area of Island","memory":"43.4 MB","code":"class Solution {\n    public int maxAreaOfIsland(int[][] grid) {\n        int n = grid.length;\n        int m = grid[0].length;\n        int ans = 0;\n        boolean[][] vis = new boolean[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(!vis[i][j] && grid[i][j] == 1) {\n                    ans = Math.max(ans, helper(grid, i, j, vis));\n                    \n                }\n            }\n        }\n        return ans;\n    }\n\n\n    int helper(int[][] grid, int i, int j, boolean[][] vis) {\n        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || vis[i][j] || grid[i][j] == 0) return 0;\n        int count = 0;\n        if(!vis[i][j]) count = 1;\n        vis[i][j] = true;\n        return helper(grid, i+1, j, vis) +\n        helper(grid, i-1, j, vis) +\n        helper(grid, i, j+1, vis) +\n        helper(grid, i, j-1, vis) + count;\n    }\n}","compare_resulttitle_slug":"max-area-of-island","has_notes":false,"flag_type":1}