{"id":1004245187,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1690356391,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1004245187/","is_pending":"Not Pending","title":"Merge Intervals","memory":"45.5 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        // sorting the intervals array considering starting index\n        Arrays.sort(intervals, (a, b) -> {\n            return a[0] - b[0];\n        });\n\n        int psp = intervals[0][0];\n        int pep = intervals[0][1];\n\n        Stack<int[]> stack = new Stack<>(); // for storing ans [si, ei]\n\n        for(int i = 1; i < intervals.length; i++) {\n            int csp = intervals[i][0];\n            int cep = intervals[i][1];\n\n            if(csp <= pep) {\n                if(cep > pep)\n                pep = cep;\n            } else {\n                int[] temp = {psp, pep};\n                stack.push(temp);\n                psp = csp;\n                pep = cep;\n            }\n        }\n\n        stack.push(new int[]{psp, pep});\n\n        int[][] ans = new int[stack.size()][2];\n\n        for(int i = stack.size()-1; i >= 0; i--) {\n            int[] temp = stack.pop();\n            ans[i][0] = temp[0];\n            ans[i][1] = temp[1];\n        }\n\n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false,"flag_type":1}