{"id":1091235930,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1699098345,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1091235930/","is_pending":"Not Pending","title":"Minimum Number of Days to Make m Bouquets","memory":"N/A","code":"class Solution {\n    public int minDays(int[] arr, int m, int k) {\n        \n        int n = arr.length;\n\n        // finding the max day in array\n        int j = -1;\n        for(int i = 0; i < n; i++) j = Math.max(j, arr[i]);\n\n        int i = 0;\n        boolean isAnyWayPossible = false;\n\n        while(i < j) {\n\n            int mid = i + (j - i) / 2;\n\n            int bouquetMadeTillNow = 0;\n            int adjacentCount = 0;\n            for(int l = 0; l < n; l++) {\n                if(arr[l] <= mid) adjacentCount++;\n                else adjacentCount = 0;\n                if(adjacentCount == k) {\n                    bouquetMadeTillNow++;\n                    adjacentCount = 0;\n                }\n            }\n\n            // System.out.println(mid + \" \" + bouquetMadeTillNow);\n            if(bouquetMadeTillNow >= m) {j = mid; isAnyWayPossible = true;}\n            else i = mid + 1;\n        }\n\n        // System.out.println(i);\n        // if(isAnyWayPossible)\n        \n\n        int bouquetMadeTillNow = 0;\n            int adjacentCount = 0;\n            for(int l = 0; l < n; l++) {\n                if(arr[l] <= i) adjacentCount++;\n                else adjacentCount = 0;\n                if(adjacentCount == k) {\n                    bouquetMadeTillNow++;\n                    adjacentCount = 0;\n            }\n        }\n\n        if(bouquetMadeTillNow == m) return i;\n        return -1;\n    }\n}","compare_result":"11101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-days-to-make-m-bouquets","has_notes":false,"flag_type":1}