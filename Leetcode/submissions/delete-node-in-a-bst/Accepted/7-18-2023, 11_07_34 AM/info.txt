{"id":997279011,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1689658654,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/997279011/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"45.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if(root == null) return root;\n\n        if(root.val < key) root.right = deleteNode(root.right, key);\n        else if(root.val > key) root.left = deleteNode(root.left, key);\n\n        else {\n            if(root.right == null && root.left == null) root = null;\n            else if(root.right == null) root = root.left;\n            else if(root.left == null) root = root.right;\n\n            else {\n                TreeNode temp = findMin(root.right);\n                root.val = temp.val;\n\n                root.right = deleteNode(root.right, temp.val);\n            }\n        }\n\n        return root;\n    }\n\n    TreeNode findMin(TreeNode root) {\n        while(root.left != null) root = root.left;\n\n        return root;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst","has_notes":false,"flag_type":1}