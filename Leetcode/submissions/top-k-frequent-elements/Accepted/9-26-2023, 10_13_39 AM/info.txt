{"id":1059359057,"lang":"java","lang_name":"Java","time":"2 months, 1 week","timestamp":1695703419,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1059359057/","is_pending":"Not Pending","title":"Top K Frequent Elements","memory":"47.2 MB","code":"class Solution {\n    public int[] topKFrequent(int[] arr, int k) {\n        // using hashmap and prioriry queue\n\n\t\tMap<Integer, Integer> map = new HashMap<>();\n\t\tint n = arr.length;\n\n\t\t// using hashmap to store element frequency wise\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tmap.put(arr[i], map.getOrDefault(arr[i], 0) + 1);\n\t\t}\n\n\t\t// using max priority queue to sort hash map according to freq.\n\n\t\tPriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> {\n\t\t\t\n\t\t\treturn map.get(b) - map.get(a);\n\t\t});\n\n\t\tfor(int i: map.keySet()) {\n\t\t\tpq.add(i);\n\t\t}\n\n\t\tint[] ans = new int[k];\n\t\tfor(int i = 0; i < k; i++) ans[i] = pq.remove();\n\n\t\treturn ans;\n    }\n}","compare_result":"111111111111111111111","title_slug":"top-k-frequent-elements","has_notes":false,"flag_type":1}