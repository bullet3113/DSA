{"id":989870510,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1688877078,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/989870510/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"46.3 MB","code":"class Solution {\n    public int maxSubarraySumCircular(int[] nums) {\n        int n = nums.length;\n\n        // the most optimal approach\n        // take min sum subarray\n        // deduct from total sum\n        // return the answer\n        // have to handle one edge case \n        // if all values are -ve return max value of the array\n\n        int total_sum = 0;\n        int global_min = Integer.MAX_VALUE;\n        int curr_min = 0;\n        int global_max = Integer.MIN_VALUE;\n        int curr_max = 0;\n        int max_ele = Integer.MIN_VALUE; // if all values get -ve then return this\n        boolean check = false; // to check if all the values are negative or not\n\n        for(int i = 0; i < n; i++) {\n            total_sum += nums[i];\n            // change sign of all the elements in array\n            // using this we can calculate the max sum using kadane algo\n            \n            if(nums[i] >= 0) check = true;\n            max_ele = Math.max(max_ele, nums[i]); // edge case handled\n\n            // applying kadane's algo\n            // min sum\n            curr_min += nums[i];\n            global_min = Math.min(curr_min, global_min);\n            curr_min = Math.min(0, curr_min);\n\n            // max sum\n            curr_max += nums[i];\n            global_max = Math.max(curr_max, global_max);\n            curr_max = Math.max(0, curr_max);\n        }\n\n        if(check) {\n            return Math.max(global_max, total_sum - global_min);\n        }\n\n        // edge case all values were -ve\n        return max_ele;\n    }\n}\n\n\n// TLE: time limit exceeded\n        /* // we have to start our index from each element\n        int n = nums.length;\n        int global_max = Integer.MIN_VALUE;\n\n        for(int i = 0; i < n; i++) {\n            int curr_max = 0;\n            int si = i;\n            int ei = n + i;\n\n            while(si < ei) {\n                curr_max += nums[si % n];\n                \n                global_max = Math.max(global_max, curr_max);\n                curr_max = Math.max(curr_max, 0);\n                si++;\n            }\n        }\n        return global_max; */","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-circular-subarray","has_notes":false,"flag_type":1}