{"id":997336292,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1689663464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/997336292/","is_pending":"Not Pending","title":"Serialize and Deserialize BST","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        if(root == null) return \"x,\";\n\n\n        return String.valueOf(root.val) + \",\" + serialize(root.left) + serialize(root.right);\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        String[] arr = data.split(\",\");\n        // System.out.println(Arrays.toString(arr));\n        int[] n = new int[1];\n        TreeNode temp = helper(arr, n);\n        // System.out.println(n[0]);\n        return temp;\n    }\n\n    TreeNode helper(String[] arr, int n[]) {\n        TreeNode node = null;\n        if(n[0] < arr.length) {\n            \n            if(!arr[n[0]].startsWith(\"x\")) \n                node = new TreeNode(Integer.parseInt(arr[n[0]].substring(0, 1)));\n\n                n[0]++;\n        if(node != null)\n        {node.left = helper(arr, n);\n        node.right = helper(arr, n);}\n\n        } \n        \n        \n\n        // System.out.println(arr[n[0]]);\n        \n        return node;\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// String tree = ser.serialize(root);\n// TreeNode ans = deser.deserialize(tree);\n// return ans;","compare_result":"11111111111000000000000000000000000000000000000000000000000000","title_slug":"serialize-and-deserialize-bst","has_notes":false,"flag_type":1}