{"id":1071503003,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1696911961,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1071503003/","is_pending":"Not Pending","title":"Rotate List","memory":"41.3 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        // getting total no. of nodes \n        int n = 0;\n        ListNode curr = head;\n        while(curr != null) {\n            n++;\n            curr = curr.next;\n        }   \n\n        if(k == 0 || n == 0) return head;\n        k = k % n;\n        k = n - k;\n\n        if(k == n) return head;\n\n        curr = head;\n        while(k > 1) {\n            curr = curr.next;\n            k--;\n        }\n        \n        // curr has 3 now\n        ListNode nextNode = curr.next; // 4\n\n        // making 3 last node\n        curr.next = null;\n\n        // getting the new head\n        ListNode newHead = nextNode;\n\n        // joining OG head at the end of 5\n        while(nextNode.next != null) nextNode = nextNode.next;\n        nextNode.next = head;\n\n        return newHead;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list","has_notes":false,"flag_type":1}