{"id":1000656525,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1690004127,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1000656525/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"41.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> verticalTraversal(TreeNode root) {\n        List<List<Integer>> list = new ArrayList<>();\n        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();\n        helper(root, map, 0, 0);\n        for(int key: map.keySet()) {\n            List<Integer> temp = new ArrayList<>();\n            for(int key2: map.get(key).keySet()) {\n                PriorityQueue<Integer> pq = map.get(key).get(key2);\n                while(!pq.isEmpty()) temp.add(pq.remove());\n                // temp.addAll(); this is restricting priority queue from returning small elements at first\n            }\n            list.add(new ArrayList<>(temp));\n        }\n\n        // for(TreeMap<Integer,PriorityQueue<Integer>> inMap: map.values()){\n            \n        //     ArrayList<Integer> tempList=new ArrayList<>();\n        //     for(PriorityQueue<Integer> pq:inMap.values()){\n        //         while(!pq.isEmpty()){\n        //             tempList.add(pq.poll());\n        //         }\n        //     }\n        //     list.add(tempList);\n        // }\n        return list;\n    }\n\n    void helper(TreeNode root, TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map, int idx, int lvl) {\n        if(root == null) return;\n        \n        if(!map.containsKey(idx)) {\n            map.put(idx, new TreeMap<>());        \n        }\n\n        if(!map.get(idx).containsKey(lvl)) {\n            map.get(idx).put(lvl, new PriorityQueue<>());\n        }\n        map.get(idx).get(lvl).add(root.val);    \n        \n        helper(root.left, map, idx-1, lvl+1);\n        helper(root.right, map, idx+1, lvl+1);\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"flag_type":1}