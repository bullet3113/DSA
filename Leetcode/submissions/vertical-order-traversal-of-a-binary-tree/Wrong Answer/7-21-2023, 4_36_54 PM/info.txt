{"id":1000112095,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1689937614,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1000112095/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> verticalTraversal(TreeNode root) {\n        List<List<Integer>> list = new ArrayList<>();\n        Map<Integer, ArrayList<Integer>> map = new TreeMap<>();\n        helper(root, map, 0);\n        for(int key: map.keySet()) {\n            Collections.sort(map.get(key));\n            list.add(map.get(key));\n            }\n\n        return list;\n    }\n\n    void helper(TreeNode root, Map<Integer, ArrayList<Integer>> map, int idx) {\n        if(root == null) return;\n        \n        if(!map.containsKey(idx)) map.put(idx, new ArrayList<>());\n        map.get(idx).add(root.val);\n        helper(root.left, map, idx-1);\n        helper(root.right, map, idx+1);\n    }\n}","compare_result":"1111111111100110100000000000000000","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"flag_type":1}