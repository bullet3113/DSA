{"id":1000643901,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1690002733,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1000643901/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> verticalTraversal(TreeNode root) {\n        List<List<Integer>> list = new ArrayList<>();\n        Map<Integer, Map<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();\n        helper(root, map, 0, 0);\n        for(int key: map.keySet()) {\n            List<Integer> temp = new ArrayList<>();\n            for(int key2: map.get(key).keySet()) {\n                temp.addAll(map.get(key).get(key2));\n            }\n            list.add(new ArrayList<>(temp));\n        }\n\n        return list;\n    }\n\n    void helper(TreeNode root, Map<Integer, Map<Integer, PriorityQueue<Integer>>> map, int idx, int lvl) {\n        if(root == null) return;\n        \n        if(!map.containsKey(idx)) {\n            map.put(idx, new TreeMap<>());        \n        }\n\n        if(!map.get(idx).containsKey(lvl)) {\n            map.get(idx).put(lvl, new PriorityQueue<>());\n        }\n        map.get(idx).get(lvl).add(root.val);    \n        \n        helper(root.left, map, idx-1, lvl+1);\n        helper(root.right, map, idx+1, lvl+1);\n    }\n}","compare_result":"1111111111111111111101000000000011","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"flag_type":1}