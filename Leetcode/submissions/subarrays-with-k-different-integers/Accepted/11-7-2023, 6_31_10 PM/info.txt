{"id":1093602036,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1699362070,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1093602036/","is_pending":"Not Pending","title":"Subarrays with K Different Integers","memory":"45.8 MB","code":"class Solution {\n    public int subarraysWithKDistinct(int[] nums, int k) {\n        \n        int n = nums.length;\n        int[] kArray = answerArray(nums, n, k);\n        int[] kMinusOneArray = answerArray(nums, n, k-1);\n\n        int ans = 0;\n\n        for(int i = 0; i < n; i++) {\n            ans += Math.abs(kArray[i] - kMinusOneArray[i]);\n        }\n\n        return ans;\n    }\n\n    int[] answerArray(int[] nums, int n, int k) {\n        \n        int i = 0;\n        int j = 0;\n        int[] arr = new int[n];\n        Map<Integer, Integer> map = new HashMap<>();\n        while(i < n) {\n            \n            int val = nums[i];\n\n            map.put(val, map.getOrDefault(val, 0) + 1);\n\n            while(map.size() > k && j < i) {\n                int temp = nums[j];\n                map.put(temp, map.get(temp) - 1);\n                if(map.get(temp) == 0) map.remove(temp);\n                j++;\n            }\n\n            if(map.size() <= k) {\n                arr[i] = i - j + 1; \n            }\n\n            i++;\n        }\n\n        return arr;\n    }\n}\n\n\n// two hashmaps needed first one for k different integers\n// second for k-1 different integers\n// resultant will be sum of difference of their length","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"subarrays-with-k-different-integers","has_notes":false,"flag_type":1}