{"id":998037796,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1689729982,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/998037796/","is_pending":"Not Pending","title":"Course Schedule II","memory":"44.5 MB","code":"class Solution {\n    public int[] findOrder(int n, int[][] p) {\n        // adjacency list\n        ArrayList<Integer>[] adj = new ArrayList[n];\n        for(int i = 0; i < n; i++) adj[i] = new ArrayList<>();\n\n        for(int i = 0; i < p.length; i++) {\n            adj[p[i][1]].add(p[i][0]);\n        }\n        \n        // creating indegree array\n        int[] indegree = new int[n];\n\n        for(int i = 0; i < n; i++) {\n            for(int it: adj[i]) {\n                indegree[it]++;\n            }\n        }\n\n        int[] topoSort = new int[n];\n        Queue<Integer> q = new LinkedList<>();\n\n        // adding all elements to q whose indegree is 0\n        for(int i = 0; i < n; i++) {\n            if(indegree[i] == 0) q.add(i);\n        }\n\n        int c = 0;\n\n        while(!q.isEmpty()) {\n            int dq = q.remove();\n\n            topoSort[c++] = dq;\n\n            for(int it: adj[dq]) {\n                indegree[it]--;\n                if(indegree[it] == 0) q.add(it);\n            }\n        }\n\n        if(c == n) return topoSort;\n\n        return new int[] {};\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"course-schedule-ii","has_notes":false,"flag_type":1}