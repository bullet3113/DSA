{"id":941486399,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1682763042,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/941486399/","is_pending":"Not Pending","title":"Subsets","memory":"42.8 MB","code":"class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n         List<List<Integer>> list = new ArrayList<>();\n        helper(list, nums, 0, new ArrayList<>());\n        return list;\n    }\n\n    void helper(List<List<Integer>> list, int[] nums, int i, ArrayList<Integer> ans) {\n       \n        if(i >= nums.length) {\n            list.add(new ArrayList<>(ans));\n            // ans.clear();\n            return;\n        }\n\n        \n        // //exclude case\n        // ArrayList<Integer> exclude_case = helper(nums, i+1, ans);\n\n        // //include case\n        // ArrayList<Integer> include_case = helper(nums, i+1, ans);\n        ans.add(nums[i]);\n         helper(list, nums, i+1, ans);\n        //  if(ans.size()  > 0)\n        ans.remove(ans.size()-1);\n        helper(list, nums, i+1, ans);\n    }\n\n//     public List<List<Integer>> subsets(int[] nums) {\n//     List<List<Integer>> list = new ArrayList<>();\n//     // Arrays.sort(nums);\n//     backtrack(list, new ArrayList<>(), nums, 0);\n//     return list;\n// }\n\n// private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){\n//     list.add(new ArrayList<>(tempList));\n//     for(int i = start; i < nums.length; i++){\n//         tempList.add(nums[i]);\n//         backtrack(list, tempList, nums, i + 1);\n//         tempList.remove(tempList.size() - 1);\n//     }\n// }\n}","compare_result":"1111111111","title_slug":"subsets","has_notes":false,"flag_type":1}