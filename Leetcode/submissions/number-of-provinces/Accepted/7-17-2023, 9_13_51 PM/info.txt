{"id":996807556,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1689608631,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/996807556/","is_pending":"Not Pending","title":"Number of Provinces","memory":"45.2 MB","code":"class Solution {\n    public int findCircleNum(int[][] matrix) {\n        // creating graph\n        int n = matrix.length;\n        int m = matrix[0].length;\n\n        ArrayList<Integer>[] adj = new ArrayList[n];\n        for(int i = 0; i < n; i++) adj[i] = new ArrayList<>();\n\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(matrix[i][j] == 1) {\n                    adj[i].add(j);\n                    adj[j].add(i);\n                }\n            }\n        }\n\n        // finding connected components\n        boolean[] vis = new boolean[n];\n\n        int c = 0;\n        for(int i = 0; i < n; i++) {\n            if(!vis[i]) {\n                dfs(adj, i, vis);\n                c++;\n            }\n        }\n\n        return c;\n    }\n\n    void dfs(ArrayList<Integer>[] adj, int src, boolean[] vis) {\n        vis[src] = true;\n\n        for(int val: adj[src]) {\n            if(!vis[val]) dfs(adj, val, vis);\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}