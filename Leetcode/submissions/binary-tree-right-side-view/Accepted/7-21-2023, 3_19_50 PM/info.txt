{"id":1000067885,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1689932990,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1000067885/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"41.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        Map<Integer, TreeNode> map = new HashMap<>();\n\t\thelper(root, 0, map);\n\t\tint n = map.size();\n        List<Integer> list = new ArrayList<>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tlist.add(map.get(i).val);\n\t\t}\n\n        return list;\n    }\n\n    void helper(TreeNode root, int level, Map<Integer, TreeNode> map) {\n\t\tif(root == null)\n\t\t\treturn;\n\n\t\tif(!map.containsKey(level)) {\n\t\t\tmap.put(level, root);\n\t\t}\n        \n        helper(root.right, level+1, map);\n\t\thelper(root.left, level+1, map);\n\t\t\n\t}\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false,"flag_type":1}