{"id":987472558,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1688618989,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/987472558/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"41.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        \n        List<Integer> list = new ArrayList<>();\n        Queue<TreeNode> q = new LinkedList<>();\n        q.add(root);\n        \n        while(!q.isEmpty()) {\n            int s = q.size();\n            \n            if(q.peek() != null)\n            list.add(q.peek().val);\n            while(s > 0) {\n                TreeNode dq = q.remove();\n                \n                if(dq != null)\n                {if(dq.right != null) q.add(dq.right);\n                if(dq.left != null) q.add(dq.left);}\n                \n                s--;\n            }\n        }\n        return list;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false,"flag_type":1}