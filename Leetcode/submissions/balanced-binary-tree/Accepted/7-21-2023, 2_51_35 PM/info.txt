{"id":1000051608,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1689931295,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1000051608/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"43.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        if(root == null) return true;\n\n        int l = helper(root.left);\n        int r = helper(root.right);\n\n        return Math.abs(l - r) <= 1 && isBalanced(root.left) && isBalanced(root.right);\n\n    }\n\n    int helper(TreeNode root) {\n        if(root == null) return 0;\n\n        return 1 + Math.max(helper(root.left), helper(root.right));\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}