{"id":986717737,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1688539980,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/986717737/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"40.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    int idx = 0;\n    public TreeNode bstFromPreorder(int[] preorder) {\n        return helper(preorder, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    }\n\n    TreeNode helper(int[] arr, int min, int max) {\n        if(idx >= arr.length || arr[idx] < min || arr[idx] > max) return null;\n\n        TreeNode node = new TreeNode(arr[idx++]);\n        node.left = helper(arr, min, node.val);\n        node.right = helper(arr, node.val, max);\n\n        return node;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}