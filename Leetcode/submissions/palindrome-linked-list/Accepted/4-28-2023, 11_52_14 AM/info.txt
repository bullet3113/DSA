{"id":940962135,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1682662934,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/940962135/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"59.2 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        // getting the middle of the list using floyd algo\n        ListNode slow = head, fast = head;\n        while(fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        // reversing the back half of the list\n        ListNode prev = null;\n        while(slow != null) {\n            ListNode temp = slow.next;\n            slow.next = prev;\n            prev = slow;\n            slow = temp;\n        }\n\n        slow = prev;\n\n        while(slow != null) {\n            if(head.val != slow.val) {\n                return false;\n            }\n            slow = slow.next;\n            head = head.next;\n        }\n\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}