{"id":998033290,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1689729312,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/998033290/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"44.1 MB","code":"class Solution {\r\n    public int minimumEffortPath(int[][] heights) {\r\n        int dir[][] = {\r\n            {1, 0},\r\n            {-1, 0},\r\n            {0, 1},\r\n            {0, -1}\r\n        };\r\n\r\n        int n = heights.length;\r\n        int m = heights[0].length;\r\n\r\n        int ans[][] = new int[n][m];\r\n\r\n        for(int[] a: ans) Arrays.fill(a, Integer.MAX_VALUE);\r\n\r\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {\r\n            return a[0] - b[0];\r\n        });\r\n\r\n        pq.add(new int[] {0, 0, 0});\r\n        ans[0][0] = 0;\r\n\r\n        while(!pq.isEmpty()) {\r\n            int[] temp = pq.remove();\r\n            int wt = temp[0]; int x = temp[1]; int y = temp[2];\r\n\r\n            if(x == n-1 && y == m-1) return wt;\r\n\r\n            for(int i = 0; i < 4; i++) {\r\n                int newX = x + dir[i][0];\r\n                int newY = y + dir[i][1];\r\n\r\n                if(newX >= 0 && newY >= 0 && newX < n && newY < m) {\r\n\r\n                    int newAns = Math.max(wt, Math.abs(heights[x][y] - heights[newX][newY]));\r\n\r\n                    if(newAns < ans[newX][newY]) {\r\n                        ans[newX][newY] = newAns;\r\n                        pq.add(new int[] {newAns, newX, newY});\r\n                    }\r\n\r\n                    \r\n                }\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-minimum-effort","has_notes":false,"flag_type":1}