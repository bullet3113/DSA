{"id":1104967101,"lang":"java","lang_name":"Java","time":"1 week, 6 days","timestamp":1700759611,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1104967101/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"55.7 MB","code":"class Solution {\n    public List<List<String>> partition(String s) {\n        \n        List<List<String>> list = new ArrayList<>();\n        helper(s, 0, new ArrayList<>(), list);\n\n        return list;\n    }\n\n    void helper(String s, int index, List<String> temp, List<List<String>> list) {\n\n            \n        if(s.length() == index) {\n            list.add(new ArrayList(temp));\n        }\n\n        for(int i = index; i < s.length(); i++) {\n            if(palindromeChecker(s, index, i)) {\n                temp.add(s.substring(index, i+1));\n                helper(s, i+1, temp, list);\n                temp.remove(temp.size() - 1);\n            }\n        }\n    }\n\n    // palindrome checker\n    boolean palindromeChecker(String s, int i, int j) {\n        while(i <= j) {\n            char start = s.charAt(i);\n            char end = s.charAt(j);\n\n            if(start != end) return false;\n\n            i++;\n            j--;\n        }\n\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false,"flag_type":1}