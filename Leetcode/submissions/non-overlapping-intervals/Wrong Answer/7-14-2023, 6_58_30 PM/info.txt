{"id":994320025,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1689341310,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/994320025/","is_pending":"Not Pending","title":"Non-overlapping Intervals","memory":"N/A","code":"class Solution {\n    public int eraseOverlapIntervals(int[][] intervals) {\n        \n        // sorting the intervals array according to starting points\n        Arrays.sort(intervals, (a, b) -> {\n            return a[0] - b[0];\n        });\n\n        int c = 0;\n        int psp = -1; // parent starting pointer\n        int pep = -1; // parent ending pointer\n\n        for(int[] a: intervals) {\n            // System.out.println(Arrays.toString(a));\n            int csp = a[0]; // child starting pointer\n            int cep = a[1]; // child ending pointer\n\n            if(pep >= csp) {\n\n                if(pep >= cep) {\n\n                    psp = csp;\n                    pep = cep;\n                    c++;\n                } else {\n\n                    psp = csp;\n                    pep = cep;\n                }\n            } else {\n\n                psp = csp;\n                pep = cep;\n            }\n        }\n\n        return c;\n    }\n}","compare_result":"1111101010010000000000000000000000000000000000000000010000","title_slug":"non-overlapping-intervals","has_notes":false,"flag_type":1}