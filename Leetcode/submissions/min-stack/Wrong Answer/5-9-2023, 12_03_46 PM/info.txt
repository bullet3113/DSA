{"id":947077439,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1683614026,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/947077439/","is_pending":"Not Pending","title":"Min Stack","memory":"N/A","code":"class MinStack {\n    Stack<Integer> s1 = new Stack<>();\n    Stack<Integer> s2 = new Stack<>();\n    // int min;\n    public MinStack() {\n        \n    }\n    \n    public void push(int val) {\n        if(s1.empty()) {\n            s1.push(val);\n            s2.push(val);\n        } \n        s1.push(val);\n        if(s1.peek() < s2.peek()) {\n            s2.push(s1.peek());\n        }\n    }\n    \n    public void pop() {\n        int temp = s1.pop();\n        if(temp == s2.peek()) {\n            s2.pop();\n        }\n    }\n    \n    public int top() {\n        if(s1.empty())\n            return 0;\n        return s1.peek();\n    }\n    \n    public int getMin() {\n        if(s2.empty())\n            return 0;\n        return s2.peek();\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(val);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */","compare_result":"1111100110000000000000000000000","title_slug":"min-stack","has_notes":false,"flag_type":1}