{"id":986668357,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1688535358,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/986668357/","is_pending":"Not Pending","title":"Binary Tree Preorder Traversal","memory":"40.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> preorderTraversal(TreeNode root) {\n         // using stack\n        Stack<pair> st = new Stack<>();\n        st.push(new pair(root, 1));\n\n        List<Integer> ls = new ArrayList<>();\n        if(root == null) return ls;\n        while(!st.isEmpty()) {\n            pair p = st.peek();\n            if(p.state == 1) {\n                p.state++;\n                ls.add(p.par.val);\n                if(p.par.left != null)\n                st.push(new pair(p.par.left, 1));\n            } else if(p.state == 2) {\n                p.state++;\n                if(p.par.right != null)\n                st.push(new pair(p.par.right, 1));\n            } else {\n                st.pop();\n            }\n        }\n\n        return ls;\n    }\n}\n\nclass pair {\n    TreeNode par;\n    int state;\n\n    public pair(TreeNode par, int state) {\n        this.par = par;\n        this.state = state;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-preorder-traversal","has_notes":false,"flag_type":1}