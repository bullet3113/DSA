{"id":992620011,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1689161700,"status":10,"status_display":"Accepted","runtime":"1546 ms","url":"/submissions/detail/992620011/","is_pending":"Not Pending","title":"Sliding Window Maximum","memory":"60 MB","code":"class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        // firstyly we have to calculate the next greater index of the nums\n        int n = nums.length;\n        int[] nge = new int[n];\n        NGE(nums, nge);\n\n        // hitting the problem\n        int[] ans = new int[n - k + 1];\n\n        int i = 0, j = 0;\n\n        while(i <= n - k) {\n            j = i;\n            while(nge[j]<i+k){\n                j = nge[j];\n            }\n            ans[i] = nums[j];\n            i++;\n        }\n        \n        return ans;\n    }\n\n    void NGE(int[] nums, int[] nge) {\n        int n = nums.length;\n        nge[nums.length-1]=nums.length;\n        Stack<Integer> st=new Stack<>();\n        st.push(nums.length-1);\n        for(int i=nums.length-2;i>=0;i--){\n            while(st.size()>0 && nums[i]>=nums[st.peek()]){\n                st.pop();\n            }\n            if(st.size()==0){\n                nge[i]=nums.length;\n            }else{\n                nge[i]=st.peek();\n            }\n            st.push(i);\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"sliding-window-maximum","has_notes":false,"flag_type":1}