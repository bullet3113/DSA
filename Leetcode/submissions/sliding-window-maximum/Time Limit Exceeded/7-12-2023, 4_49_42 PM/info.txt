{"id":992611156,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1689160782,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/992611156/","is_pending":"Not Pending","title":"Sliding Window Maximum","memory":"N/A","code":"class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        // firstyly we have to calculate the next greater index of the nums\n        int n = nums.length;\n        int[] nge = new int[n];\n        NGE(nums, nge);\n\n        // hitting the problem\n        int[] ans = new int[n - k + 1];\n\n        int i = 0, j = 0;\n\n        while(j <= n - k) {\n            int windowSize = j + k;\n            if(i < j) i = j;\n            while(nge[i] < windowSize) {\n                i = nge[i];\n                if(windowSize == n && i == n-1) break;\n            }\n\n            ans[j] = nums[i];\n            j++;\n        }\n        \n        return ans;\n    }\n\n    void NGE(int[] nums, int[] nge) {\n        int n = nums.length;\n\n        Stack<Integer> s = new Stack<>();\n        s.push(n-1);\n        nge[n-1] = n-1;\n\n        for(int i = n-2; i >= 0; i--) {\n    \n            if(nums[i] < nums[s.peek()]) {\n                nge[i] = s.peek();\n            } else {\n                while(!s.isEmpty() && nums[i] >= nums[s.peek()]) {\n                    s.pop();\n                }\n\n                if(s.isEmpty()) {\n                    nge[i] = i;\n                } else {\n                    nge[i] = s.peek();\n                }\n            }\n\n            s.push(i);\n        }\n    }\n}","compare_result":"110000000000000000000000000000000000000000000000000","title_slug":"sliding-window-maximum","has_notes":false,"flag_type":1}