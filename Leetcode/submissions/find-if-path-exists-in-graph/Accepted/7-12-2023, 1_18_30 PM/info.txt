{"id":992483819,"lang":"java","lang_name":"Java","time":"4 months, 4 weeks","timestamp":1689148110,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/992483819/","is_pending":"Not Pending","title":"Find if Path Exists in Graph","memory":"124.6 MB","code":"class Solution {\n    public boolean validPath(int n, int[][] edges, int source, int destination) {\n        // create graph\n        ArrayList<Integer>[] adj = new ArrayList[n];\n        for(int i = 0; i < n; i++) adj[i] = new ArrayList<>();\n\n        for(int i = 0; i < edges.length; i++) {\n            int u = edges[i][0];\n            int v = edges[i][1];\n\n            adj[u].add(v);\n            adj[v].add(u);\n        }\n\n        // checking for path\n        Queue<Integer> q = new LinkedList<>();\n        q.add(source);\n        boolean[] vis = new boolean[n];\n\n        while(!q.isEmpty()) {\n            int dq = q.remove();\n\n            if(dq == destination) return true;\n\n            if(vis[dq] == true) continue;\n            vis[dq] = true;\n\n            for(int i: adj[dq]) {\n                if(!vis[i]) q.add(i);\n            }\n        }\n\n        return false;\n\n\n    }\n}","compare_result":"11111111111111111111111111111","title_slug":"find-if-path-exists-in-graph","has_notes":false,"flag_type":1}