{"id":947554189,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1683682334,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/947554189/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"N/A","code":"class Solution {\n    public int largestRectangleArea(int[] heights) {\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < heights.length; i++) {\n            int temp = NSE(heights, i) - PSE(heights, i) - 1;\n            if((temp * heights[i]) > max) {\n                max = temp * heights[i];\n            }\n        }\n\n        return max;\n    }\n\n    int NSE(int[] arr, int i) {\n        // Stack<Integer> stack = new Stack<>();\n        int temp = arr[i];\n        i++;\n        for(; i < arr.length; i++) {\n            if(arr[i] < temp) {\n                return i;\n            }\n        }\n\n        return arr.length;\n    }\n\n    int PSE(int[] arr, int i) {\n        // Stack<Integer> stack = new Stack<>();\n        int temp = arr[i];\n        i--;\n        for(; i >= 0; i--) {\n            if(arr[i] < temp) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"largest-rectangle-in-histogram","has_notes":false,"flag_type":1}