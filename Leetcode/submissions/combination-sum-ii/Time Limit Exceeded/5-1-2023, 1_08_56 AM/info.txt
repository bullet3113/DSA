{"id":942263283,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1682883536,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/942263283/","is_pending":"Not Pending","title":"Combination Sum II","memory":"N/A","code":"class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        List<List<Integer>> list = new ArrayList<>();\n        Arrays.sort(candidates);\n        helper(0, candidates, target, list, new ArrayList<>(), new boolean[candidates.length]);\n        return list;\n    }\n\n    void helper(int i, int arr[], int sum, List<List<Integer>> list, List<Integer> temp, boolean maps[]) {\n        if(sum < 0)\n        return;\n        \n        if(sum == 0 && !list.contains(temp)) {\n                list.add(new ArrayList<>(temp));\n                return;\n            } else if(sum == 0) return;\n\n        if(i == arr.length) {\n            if(sum == 0 ) {\n                list.add(new ArrayList<>(temp));\n            }\n\n            return;\n        }\n\n        // if(arr[i] <= sum) {\n            if(!maps[i]) {\n                maps[i] = true;\n                temp.add(arr[i]);\n                helper(i+1, arr, sum - arr[i], list, temp, maps);\n                temp.remove(temp.size() - 1);\n                maps[i] = false;\n            }\n        // }\n            helper(i + 1, arr, sum, list, temp, maps);\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1}