{"id":1056169243,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1695375018,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1056169243/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"40.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if(root.left == null && root.right == null) return true;\n        return helper(root.left, root.right);\n    }\n\n    boolean helper(TreeNode l, TreeNode r) {\n        if(l == null && r == null) return true;\n        else if(l == null && r != null) return false;\n        else if(l != null && r == null) return false;\n        // else if(l.left == null && r.right != null) return false;\n        // else if(l.right == null && r.left != null) return false;\n\n        if(l.val != r.val) return false;\n\n        return helper(l.left, r.right) && helper(l.right, r.left);\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}