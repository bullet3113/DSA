{"id":1055109225,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1695271393,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1055109225/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"40.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        // Morris Traversal\n        List<Integer> list = new ArrayList<>();\n        \n        TreeNode curr = root;\n\n        while(curr != null) {\n            if(curr.left == null) {\n                list.add(curr.val);\n                curr = curr.right;\n            } else {\n                TreeNode temp = curr.left;\n                // going rightmost\n                while(temp.right != null && temp.right != curr) {\n                    temp = temp.right;\n                }\n                \n                if(temp.right == curr) {\n                    curr = temp.right;\n                    curr.left = null;\n                } else {\n                    temp.right = curr;\n                curr = curr.left;\n                }\n                \n            }\n        }\n\n        return list;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1}