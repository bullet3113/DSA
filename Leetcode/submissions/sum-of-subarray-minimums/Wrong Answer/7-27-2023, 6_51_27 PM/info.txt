{"id":1005341391,"lang":"java","lang_name":"Java","time":"4 months, 1 week","timestamp":1690464087,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1005341391/","is_pending":"Not Pending","title":"Sum of Subarray Minimums","memory":"N/A","code":"class Solution {\n    public int sumSubarrayMins(int[] arr) {\n        // using the concept of previous smaller and next smaller\n        int n = arr.length;\n        System.out.println(n);\n        int next_smaller[] = nsIndex(arr);\n        int prev_smaller[] = psIndex(arr);\n\n        int ans = 0;\n        int mod = (int)1e9+7;\n        for(int i = 0; i < n; i++) {\n            ans += arr[i] * ((prev_smaller[i] + 1) * (next_smaller[i] + 1));\n            ans %= 1e9+7;\n        }\n\n        return ans;\n    }\n\n    // getting a count of smaller elements not their indices\n\n    int[] nsIndex(int[] arr) {\n        int n = arr.length;\n        Stack<Integer> stack = new Stack<>();\n        int[] ans = new int[n];\n        // stack.push(n-1);\n\n        for(int i = n-1; i >= 0; i--) {\n            if(!stack.empty() && arr[stack.peek()] < arr[i]) {\n                ans[i] = stack.peek() - i - 1;\n            } else {\n                while(!stack.empty() && arr[stack.peek()] >= arr[i]) stack.pop();\n\n                if(stack.empty()) ans[i] = n - i - 1;\n                else ans[i] = stack.peek() - i - 1;\n            }\n\n            stack.push(i);\n        }\n\n        return ans;\n    }\n\n\n    int[] psIndex(int[] arr) {\n        int n = arr.length;\n        Stack<Integer> stack = new Stack<>();\n        int[] ans = new int[n];\n        // stack.push(0);\n\n        for(int i = 0; i < n; i++) {\n            if(!stack.empty() && arr[stack.peek()] < arr[i]) {\n                ans[i] = i - stack.peek() - 1;\n            } else {\n                while(!stack.empty() && arr[stack.peek()] > arr[i]) stack.pop();\n\n                if(stack.empty()) ans[i] = i;\n                else ans[i] = i - stack.peek() - 1;\n            }\n\n            stack.push(i);\n        }\n\n        return ans;\n    }    \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"sum-of-subarray-minimums","has_notes":false,"flag_type":1}