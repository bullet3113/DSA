{"id":940988146,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1682667141,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/940988146/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        // ArrayList<String> x = new ArrayList<>();\n        // while(headA != null) {\n        //     x.add(String.valueOf(headA));\n        //     headA = headA.next;\n        // }\n\n        // while(headB != null) {\n        //     if(x.contains(String.valueOf(headB)))\n        //         break;\n        //     headB = headB.next;\n        // }\n\n        // return headB;\n\n        // getting middle of both\n        ListNode midA = findMid(headA);\n        ListNode midB = findMid(headB);\n\n        if(midA == midB) {\n            return midA;\n        } else if(midA.next == midB) {\n            return midB;\n        } else if(midB.next == midA) {\n            return midA;\n        }\n\n        return null;\n    }\n\n    ListNode findMid(ListNode head) {\n        ListNode slow = head, fast = head;\n        while(fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        return slow;\n    }\n}","compare_result":"111111111111101100000000000000000000011","title_slug":"intersection-of-two-linked-lists","has_notes":false,"flag_type":1}