{"id":935151103,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1681724530,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/935151103/","is_pending":"Not Pending","title":"Permutations","memory":"43.3 MB","code":"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> list = new ArrayList<>();\n        permute(list, nums, 0, new ArrayList<Integer>());\n        return list;\n    }\n\n    void permute(List<List<Integer>> list, int[] nums, int j, List<Integer> temp) {\n        if(j == nums.length) {\n            List<Integer> deepCopy = new ArrayList<>(temp);\n            list.add(deepCopy);\n            return;\n        }\n\n        for(int i = 0; i < nums.length; i++) {\n            \n            if(nums[i] != -11) {\n                int val = nums[i];\n                nums[i] = -11;\n                temp.add(val);\n                permute(list, nums, j+1, temp);\n                temp.remove(temp.size() - 1);\n                nums[i] = val;\n            }\n        }\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1}