{"id":1091215505,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1699095661,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1091215505/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"44.3 MB","code":"class Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n        \n        int n = piles.length;\n\n        // finding max in array\n        int j = Integer.MIN_VALUE;\n        for(int i = 0; i < n; i++) j = Math.max(j, piles[i]);\n\n        if(n == h) return j;\n\n        // binary search\n        int i = 1;\n\n        while(i < j) {\n\n            int mid = i + (j - i) / 2;\n\n            int k = 0;\n            for(int l = 0; l < n; l++) {\n                k += ((int)Math.ceil(piles[l] * 1.0 / mid));\n            }\n\n            // System.out.println(mid + \" \" + k);\n            if(k <= h) j = mid;\n            else i = mid + 1;\n        }\n\n        return i;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":false,"flag_type":1}