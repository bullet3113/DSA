{"id":1091211940,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1699095189,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1091211940/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"N/A","code":"class Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n        \n        int n = piles.length;\n\n        // finding max in array\n        int j = Integer.MIN_VALUE;\n        for(int i = 0; i < n; i++) j = Math.max(j, piles[i]);\n\n        if(n == h) return j;\n\n        // binary search\n        int i = 1;\n\n        while(i <= j) {\n\n            int mid = i + (j - i) / 2;\n\n            int k = 0;\n            for(int l = 0; l < n; l++) {\n                k += ((int)Math.ceil(piles[l] * 1.0 / mid));\n            }\n\n            // System.out.println(mid + \" \" + k);\n            if(k == h) return mid;\n            else if(k > h) i = mid + 1;\n            else j = mid - 1;\n        }\n\n        return -1;\n    }\n}","compare_result":"111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000100111","title_slug":"koko-eating-bananas","has_notes":false,"flag_type":1}