{"id":999006125,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1689827550,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/999006125/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"65.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] pre, int[] in) {\n        int n = pre.length;\n        return helper(in, pre, new int[]{0}, n);\n    }\n\n     TreeNode helper(int[] in, int[] pre, int[] i, int n) {\n\t\tif(i[0] == n) return null;\n\n\t\tint ele = pre[i[0]];\n\t\tint idx = -1;\n\t\t// finding the ele index in inorder array\n\t\tfor(int j = 0; j < in.length; j++) {\n\t\t\tif(in[j] == ele) {\n\t\t\t\tidx = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(idx == -1) return null;\n\t\ti[0]++;\n\t\tTreeNode node = new TreeNode(ele);\n\n\t\tnode.left = helper(Arrays.copyOfRange(in, 0, idx), pre, i, n);\n\t\tnode.right = helper(Arrays.copyOfRange(in, idx+1, n), pre, i, n);\n\n\t\treturn node;\n\t}\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}