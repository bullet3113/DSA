{"id":940948134,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1682660641,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/940948134/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"42.8 MB","code":"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        // firstly detecting a cycle\n        ListNode slow = head, fast = head;\n        while(fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n\n            if(slow == fast) break;\n        }\n\n        if(fast == null || fast.next == null) return null;\n        while(head != slow) {\n            head = head.next;\n            slow = slow.next;\n        }\n\n        return head;\n    }\n}","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}