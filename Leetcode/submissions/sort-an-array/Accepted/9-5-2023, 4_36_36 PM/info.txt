{"id":1041141064,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1693911996,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1041141064/","is_pending":"Not Pending","title":"Sort an Array","memory":"55.4 MB","code":"class Solution {\n    public int[] sortArray(int[] nums) {\n        \n        // using the merge sort algorithm\n        if(nums.length == 1) return nums;\n\n        int mid = nums.length/2;\n        int[] left = sortArray(Arrays.copyOfRange(nums, 0, mid));\n        int[] right = sortArray(Arrays.copyOfRange(nums, mid, nums.length));\n\n        return merge(left, right);\n    }\n\n    int[] merge(int[] L, int[] R) {\n        int n1 = L.length;\n        int n2 = R.length;\n\n        int[] nums = new int[n1 + n2];\n\n        int i = 0, j = 0;\n        int k = 0;\n\n        while(i < n1 && j < n2) {\n            if(L[i] < R[j]) {\n                nums[k] = L[i];\n                i++;\n            } else {\n                nums[k] = R[j];\n                j++;\n            }\n\n            k++;\n        }\n\n        while(i < n1) {\n            nums[k] = L[i];\n            i++; \n            k++;\n        }\n\n        while(j < n2) {\n            nums[k] = R[j];\n            j++;\n            k++;\n        }\n\n        return nums;\n    }\n}","compare_result":"111111111111111111111","title_slug":"sort-an-array","has_notes":false,"flag_type":1}