{"id":992304162,"lang":"java","lang_name":"Java","time":"4 months, 4 weeks","timestamp":1689130316,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/992304162/","is_pending":"Not Pending","title":"Course Schedule","memory":"N/A","code":"class Solution {\n    public boolean canFinish(int n, int[][] p) {\n        \n        // create graph\n        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();\n\n        for(int i = 0; i < n; i++) {\n            adj.add(new ArrayList<>());\n        }\n\n        for(int i = 0; i < p.length; i++) {\n            adj.get(p[i][1]).add(p[i][0]);\n        }\n\n        // create indegree array\n        int[] indegree = new int[n];\n\n        for(int i = 0; i < n; i++) {\n            for(int it: adj.get(i)) {\n                indegree[it]++;\n            }\n        }\n\n        // create queue\n        Queue<Integer> q = new LinkedList<>();\n\n        // adding 0 indegrees to queue\n        for(int i = 0; i < n; i++) {\n            if(indegree[i] == 0) q.add(i);\n        }\n\n        // logic simple bfs\n        while(!q.isEmpty()) {\n            int dq = q.remove();\n\n            for(int it: adj.get(dq)) {\n                indegree[it]--;\n                if(indegree[it] == 0) q.add(indegree[it]);\n            }\n\n            n--;\n        }\n\n        return n == 0;\n    }\n}","compare_result":"1111111101101010111111111111011010011101110100010111","title_slug":"course-schedule","has_notes":false,"flag_type":1}