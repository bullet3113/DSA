{"id":1101225371,"lang":"java","lang_name":"Java","time":"2 weeks, 5 days","timestamp":1700288027,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1101225371/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"N/A","code":"class MedianFinder {\n\n    PriorityQueue<Integer> pqSmallMax;\n    PriorityQueue<Integer> pqLargeMin;\n\n    public MedianFinder() {\n        pqSmallMax = new PriorityQueue<>((a, b) -> b - a);\n        pqLargeMin = new PriorityQueue<>();    \n    }\n    \n    public void addNum(int num) {\n        if(pqLargeMin.isEmpty() || num <= pqLargeMin.peek()) {\n            pqSmallMax.add(num);\n        } else {\n            pqLargeMin.add(num);\n        }\n\n        if((pqSmallMax.size() - pqLargeMin.size()) > 1) {\n            pqLargeMin.add(pqSmallMax.poll());\n        }\n    }\n    \n    public double findMedian() {\n        // System.out.println(pqSmallMax.size() + \" \" + pqLargeMin.size());\n        if((pqSmallMax.size() + pqLargeMin.size()) % 2 == 0) {\n            return (double)(pqSmallMax.peek() + pqLargeMin.peek()) / 2;\n        }\n\n        return (pqSmallMax.size() > pqLargeMin.size()) ? pqSmallMax.peek() : pqLargeMin.peek();\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","compare_result":"111110110000000000111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}