{"id":1103356840,"lang":"java","lang_name":"Java","time":"2 weeks, 1 day","timestamp":1700560471,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1103356840/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"44 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSubtree(TreeNode root, TreeNode subRoot) {\n\n        if(root == null) return false;\n\n        boolean flag = isSameTree(root, subRoot);\n\n        if(flag) return true;\n\n        return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot) || flag;\n    }\n\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        \n        if(p == null && q == null) return true;\n        if(p == null && q != null) return false;\n        else if(p != null && q == null) return false;\n\n        if(p.val != q.val) return false;\n\n        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false,"flag_type":1}