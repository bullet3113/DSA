{"id":1105373534,"lang":"java","lang_name":"Java","time":"1 week, 5 days","timestamp":1700818247,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1105373534/","is_pending":"Not Pending","title":"K Closest Points to Origin","memory":"49.5 MB","code":"class Solution {\n    public int[][] kClosest(int[][] points, int k) {\n        \n        int n = points.length;\n        PriorityQueue<pair> pq = new PriorityQueue<>((a, b) -> {\n            if(a.dist > b.dist) return 1;\n            else return -1;\n        });\n\n        for(int i = 0; i < n; i++) {\n            pq.add(new pair(points[i][0], points[i][1]));\n        }\n\n        int[][] ans = new int[k][2];\n        int i = 0;\n        while(k > 0) {\n            pair p = pq.remove();\n            ans[i][0] = p.x;\n            ans[i][1] = p.y;\n\n            k--;\n            i++;\n        }\n\n        return ans;\n    }\n}\n\nclass pair {\n    int x;\n    int y;\n    double dist;\n\n    public pair(int x, int y) {\n        this.x = x;\n        this.y = y;\n        this.dist = Math.sqrt((double)((this.x * this.x) + (this.y * this.y)));\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"k-closest-points-to-origin","has_notes":false,"flag_type":1}