{"id":1095667137,"lang":"java","lang_name":"Java","time":"3 weeks, 6 days","timestamp":1699588613,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1095667137/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int widthOfBinaryTree(TreeNode root) {\n        \n        // BFS\n\n        Deque<pair> dq = new LinkedList<>();\n\n        int max = -1;\n        dq.add(new pair(root, 0));\n\n        while(!dq.isEmpty()) {\n            \n            max = Math.max(max, dq.peekLast().idx - dq.peekFirst().idx + 1);\n            pair p = dq.remove();\n            TreeNode currNode = p.node;\n            int currIdx = p.idx;\n\n            if(currNode.left != null) {\n                dq.add(new pair(currNode.left, 2*currIdx + 1));\n            }\n\n            if(currNode.right != null) {\n                dq.add(new pair(currNode.right, 2*currIdx + 2));\n            }\n        }\n\n        return max;\n    }\n}\n\nclass pair {\n    TreeNode node;\n    int idx;\n    public pair(TreeNode node, int idx) {\n        this.node = node;\n        this.idx = idx;\n    }\n}","compare_result":"111100111111111111111011111111011111011101111111011011011011111011111110011110111111110000000111100010100010001111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}