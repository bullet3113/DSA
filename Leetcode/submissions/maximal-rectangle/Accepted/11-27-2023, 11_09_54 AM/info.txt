{"id":1107218728,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1701063594,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/1107218728/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"43.9 MB","code":"class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        \n        int n = matrix.length;\n        int m = matrix[0].length;\n\n        int[][] arr = new int[n][m];\n\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(matrix[i][j] == '1') arr[i][j] = 1;\n            }\n        }\n\n        int result = Integer.MIN_VALUE;\n\n        int[] consolidated = new int[m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(arr[i][j] != 0) {\n                    consolidated[j] += arr[i][j];\n                } else {\n                    consolidated[j] = 0;\n                }\n            }\n\n            // System.out.println(Arrays.toString(consolidated));\n            int[] nextSmaller = nse(consolidated);\n            int[] prevSmaller = pse(consolidated);\n            // System.out.println(Arrays.toString(nextSmaller));\n            // System.out.println(Arrays.toString(prevSmaller));\n            for(int j = 0; j < m; j++) {\n                // int h = Math.min(consolidated[nextSmaller[j]], consolidated[prevSmaller[j]]);\n                int currAns = (nextSmaller[j] - prevSmaller[j] - 1) * consolidated[j];\n                // System.out.println(h + \" \" + currAns);\n                result = Math.max(result, currAns);\n            }\n        }\n        \n        \n        return result;\n    }\n\n\n    int[] pse(int[] arr) {\n\n        int n = arr.length;\n        int[] ans = new int[n];\n\n        Stack<Integer> stack = new Stack<>();\n        for(int i = 0; i < n; i++) {\n            int temp = arr[i];\n            while(!stack.isEmpty() && temp <= arr[stack.peek()]) {\n                stack.pop();\n            }\n\n            if(stack.isEmpty()) {\n                ans[i] = -1;\n            } else {\n                ans[i] = stack.peek();\n            }\n\n            stack.push(i);\n        }\n\n        return ans;\n    }\n    \n     int[] nse(int[] arr) {\n\n        int n = arr.length;\n        int[] ans = new int[n];\n\n        Stack<Integer> stack = new Stack<>();\n        for(int i = n-1; i >= 0; i--) {\n            int temp = arr[i];\n            while(!stack.isEmpty() && temp <= arr[stack.peek()]) {\n                stack.pop();\n            }\n\n            if(stack.isEmpty()) {\n                ans[i] = n;\n            } else {\n                ans[i] = stack.peek();\n            }\n\n            stack.push(i);\n        }\n\n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle","has_notes":false,"flag_type":1}